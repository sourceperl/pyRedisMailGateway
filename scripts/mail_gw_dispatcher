#!/usr/bin/env python3

import base64
from difflib import get_close_matches
import json
import os
import subprocess
import shutil
import tempfile
import redis
import logging
import traceback


def run_mail_app(app, *args):
    # log this run
    logging.info("call process %s with args %s" % (app, args))
    # run app
    ret_code = subprocess.call([app] + list(args))
    # check error
    if ret_code:
        logging.error("%s return error (code %s)" % (app, ret_code))


# main program
if __name__ == "__main__":
    # logging setup
    logging.basicConfig(format="%(asctime)s %(message)s", level=logging.INFO)

    # redis setup
    r = redis.StrictRedis()
    ps = r.pubsub()
    ps.subscribe(["mail_gw:msg:receive"])

    # listen loop
    for item in ps.listen():
        if item["type"] == "message":
            atts_dir = ""
            l_att_files = []
            try:
                d_r = json.loads(item["data"].decode())
                # email standard fields
                sender_adr = d_r["from"]
                subject = d_r["subject"].strip().lower()
                body = d_r["body"].strip()
                # email attachments
                if d_r["atts"]:
                    # create tmp dir
                    atts_dir = tempfile.mkdtemp()
                    # populate it with all attachments
                    for att in d_r["atts"]:
                        tmp_file = os.path.join(atts_dir, att["filename"])
                        l_att_files.append(tmp_file)
                        open(tmp_file, "wb").write(base64.b64decode(att["content"]))
                # trigger for echo request
                if get_close_matches(subject, ["test echo", "test ping"], cutoff=0.80):
                    logging.info("process echo request (request by %s)" % sender_adr)
                    run_mail_app("mail_app_send", sender_adr, "-s", "echo reply")
                # trigger for app flyspray report
                elif get_close_matches(subject, ["flyspray"], cutoff=0.75):
                    logging.info("process flyspray report (request by %s)" % sender_adr)
                    run_mail_app("mail_app_fly_report", sender_adr)
                # trigger for app A4 de com
                elif get_close_matches(subject, ["A4 de com"], cutoff=0.75):
                    logging.info("process A4 de com (request by %s)" % sender_adr)
                    # this app need attachments
                    if atts_dir:
                        run_mail_app("mail_app_a4_com", sender_adr, *l_att_files)
                    else:
                        run_mail_app("mail_app_send", sender_adr, "-s", "A4 de com: pièce jointe manquante")
                # trigger for app menu ESAT
                elif get_close_matches(subject, ["menu esat"], cutoff=0.75):
                    logging.info("process menu ESAT (request by %s)" % sender_adr)
                    # this app need attachments
                    if atts_dir:
                        run_mail_app("mail_app_menu_esat", sender_adr, *l_att_files)
                    else:
                        run_mail_app("mail_app_send", sender_adr, "-s", "menu ESAT: pièce jointe manquante")
                # no trigger found: subject not understood
                else:
                    logging.info("no trigger for subject \"%s\" (request by %s)" % (subject, sender_adr))
            except Exception:
                logging.error(traceback.format_exc())
            finally:
                # remove attachments dir
                if atts_dir:
                    shutil.rmtree(atts_dir, ignore_errors=True)
