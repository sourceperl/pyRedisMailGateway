#!/usr/bin/env python3

from configparser import ConfigParser
import logging
import os
import json
import redis
import smtplib
import traceback
from email.mime.text import MIMEText

# read config
cnf = ConfigParser()
cnf.read(os.path.expanduser('~/.mail_gateway_config'))
# imap infos
smtp_host = cnf.get("smtp", "host")
smtp_port = cnf.get("smtp", "port")
smtp_username = cnf.get("smtp", "username")
smtp_password = cnf.get("smtp", "password")
smtp_sender = smtp_username


def send_mail(to_addrs, subject="", body=""):
    # params
    from_addr = smtp_sender
    l_address = []
    if isinstance(to_addrs, str):
        l_address.append(to_addrs)
    elif isinstance(to_addrs, (list, tuple)):
        l_address = list(to_addrs)
    # connect and login
    stp = smtplib.SMTP_SSL(smtp_host, smtp_port)
    stp.login(smtp_username, smtp_password)
    # format mail
    msg = MIMEText(body)
    msg["Subject"] = subject
    msg["From"] = from_addr
    msg["To"] = ", ".join(l_address)
    # send
    send_status = stp.sendmail(from_addr, to_addrs, msg.as_string())
    logging.debug("SMTP status %s" % send_status)
    stp.quit()

# logging setup
logging.basicConfig(format="%(asctime)s %(message)s", level=logging.DEBUG)

# subscribe to redis publish channel
r = redis.StrictRedis()
ps = r.pubsub()
ps.subscribe(["email:send"])

# wait for email to send
for item in ps.listen():
    if item["type"] == "message":
        try:
            pub_d = json.loads(item["data"].decode())
            logging.debug("send mail to %s" % pub_d["to"])
            send_mail(to_addrs=pub_d["to"], subject=pub_d.get("subject", ""), body=pub_d.get("body", ""))
        except Exception:
            logging.error(traceback.format_exc())
