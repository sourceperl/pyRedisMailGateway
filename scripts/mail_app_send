#!/usr/bin/env python3

import argparse
import base64
import json
import re
import redis
import logging


# some class
class EmailType(object):
    """
    Supports checking email agains different patterns. The current available patterns is:
    RFC5322 (http://www.ietf.org/rfc/rfc5322.txt)
    """

    patterns = {
        'RFC5322': re.compile(r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"),
    }

    def __init__(self, pattern):
        if pattern not in self.patterns:
            raise KeyError('{} is not a supported email pattern, choose from:'
                           ' {}'.format(pattern, ','.join(self.patterns)))
        self._rules = pattern
        self._pattern = self.patterns[pattern]

    def __call__(self, value):
        if not self._pattern.match(value):
            raise argparse.ArgumentTypeError(
                "'{}' is not a valid email - does not match {} rules".format(value, self._rules))
        return value

# main program
if __name__ == '__main__':
    # logging setup
    logging.basicConfig(format='%(asctime)s %(message)s')

    # parse args
    parser = argparse.ArgumentParser()
    parser.add_argument("email", type=EmailType("RFC5322"))
    parser.add_argument("-s", "--subject", type=str, default="")
    parser.add_argument("-b", "--body", type=str, default="")
    parser.add_argument("-f", "--file", type=argparse.FileType("rb"), nargs="+")
    args = parser.parse_args()

    # format attachments
    l_atts = []
    if args.file:
        for f in args.file:
            l_atts.append((f.name, base64.b64encode(f.read()).decode("ascii")))

    # send report
    d_pub = dict(to=args.email, subject=args.subject, body=args.body, atts=l_atts)
    redis.StrictRedis().publish("mail_gw:msg:send", json.dumps(d_pub))
